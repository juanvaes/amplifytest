openapi: 3.0.0
info:
  version: 1.0.0
  title: Sample API
  description: A sample API to illustrate OpenAPI concepts
consumes:
  - "application/json"
produces:
  - "application/json"

servers:
  - url: https://example.io/v1

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  schemas:
    Artist:
      type: object
      required:
        - username
      properties:
        artist_name:
          type: string
        artist_genre:
          type: string
        albums_recorded:
          type: integer
        username:
          type: string
  parameters:
    PageLimit:
      name: limit
      in: query
      description: limits the number of items on a page
      schema:
        type: integer
    PageOffset:
      name: page
      in: query
      description: specifies the page number of the artists to be displayed
      schema:
        type: integer
  responses:
    400Error:
      description: invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
        
security:
- BasicAuth: []

paths:
  /artists:
    get:
      operationId: affirm.services.artists.get_artists
      description: returns a list of artists
      parameters:
        - $ref: '#/components/parameters/PageLimit'
        - $ref: '#/components/parameters/PageOffset'
      responses:
        '200': 
          description: successfully returned a list of artists
          content:
            aplication/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
    post:
      description: lets a user crate a new artist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist'
      responses:
        '200':
          description: successfully created a new artist
        '400':
          $ref: '#/components/responses/400Error'
  /artists/{username}:
    get:
      description: obtain information about an artist from his or her unique username
      parameters:
        - name: username
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: successfully returned an artist
          content:
            application/json:
              schema:
                type: object
                properties:
                  artist_name:
                    type: string
                  artist_genre:
                    type: string
                  albums_recorded:
                    type: integer
        '400':
          $ref: '#/components/responses/400Error'
